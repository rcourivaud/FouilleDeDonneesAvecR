{
    "contents" : "# install.packages(\"maps\")\n# install.packages(\"FactoMineR\")\n\nlibrary(FactoMineR)\nlibrary(maps)\nlibrary(RColorBrewer)\nlibrary(ade4)\nlibrary(corrplot)\n\nsource('ACP_TOOLS.R')\n\ndf <- read.csv('DataImi.csv', sep=';', header=TRUE)\nsummary(df)\nhead(df)\n\n# =========================================================\n#                       Cleaning Data\n# =========================================================\n\n#On met le nom des états en minuscule pour l'affichage sur une carte\ndf$State <- tolower(df$State)\npng(\"HistoIm_loc.png\")\nhist(df$IM_Loc_01, breaks=100)\ndev.off()\nhist(df$IM_Loc_00, breaks=100)\n\ndf.2001 <- df[,c(1, 3, 5, 7, 9, 11, 13, 15)]\n\nIM_Loc_01_cat <- as.factor(ifelse(df.2001$IM_Loc_01<= -6000, 'VHD',\n                        ifelse(df.2001$IM_Loc_01>=-6000 & df.2001$IM_Loc_01<0 , 'HD', \n                                      ifelse(df.2001$IM_Loc_01>=0 & df.2001$IM_Loc_01<6000 , 'HA', \n                                             ifelse(df.2001$IM_Loc_01>=6000 , 'VHA', 0)))))\n\nPOP_01_cat <- as.factor(ifelse(df.2001$Pop_Tot_01< 1000000, 'LP',\n                                  ifelse(df.2001$Pop_Tot_01>=1000000 & df.2001$Pop_Tot_01<3500000 , 'MP', \n                                         ifelse(df.2001$Pop_Tot_01>=3500000 & df.2001$Pop_Tot_01<8000000 , 'HP', \n                                                ifelse(df.2001$Pop_Tot_01>=8000000 , 'VHP', 0)))))\n\nhist(df.2001$IM_Int_01, breaks=100)\nIM_INT_01_cat <- as.factor(ifelse(df.2001$IM_Int_01< 10000, 'LD',\n                               ifelse(df.2001$IM_Int_01>=10000 & df.2001$IM_Int_01<25000 , 'MD', \n                                      ifelse(df.2001$IM_Int_01>=25000 & df.2001$IM_Int_01<50000 , 'HD', \n                                             ifelse(df.2001$IM_Int_01>=50000 , 'VHD', 0)))))\nhist(df.2001$Nb_Nai_01, breaks=100)\nNb_Nai_01_cat <- as.factor(ifelse(df.2001$Nb_Nai_01< 25000, 'LN',\n                               ifelse(df.2001$Nb_Nai_01>=25000 & df.2001$Nb_Nai_01<50000 , 'MN', \n                                      ifelse(df.2001$Nb_Nai_01>=50000 & df.2001$Nb_Nai_01<110000 , 'HN', \n                                             ifelse(df.2001$Nb_Nai_01>=110000 , 'VHN', 0)))))\n\nhist(df.2001$Nb_DC_01, breaks=100)\nNb_DC_01_cat <- as.factor(ifelse(df.2001$Nb_DC_01< 15000, 'LDC',\n                               ifelse(df.2001$Nb_DC_01>=15000 & df.2001$Nb_DC_01<30000 , 'MDC', \n                                      ifelse(df.2001$Nb_DC_01>=30000 & df.2001$Nb_DC_01<60000 , 'HDC', \n                                             ifelse(df.2001$Nb_DC_01>=60000 , 'VHDC', 0)))))\n\nhist(df.2001$Pop_inf_65_01, breaks=100)\nPop_inf_65_01_cat <- as.factor(ifelse(df.2001$Pop_inf_65_01< 1000000, 'LP',\n                               ifelse(df.2001$Pop_inf_65_01>=1000000 & df.2001$Pop_inf_65_01<3500000 , 'MP', \n                                      ifelse(df.2001$Pop_inf_65_01>=3500000 & df.2001$Pop_inf_65_01<8000000 , 'HP', \n                                             ifelse(df.2001$Pop_inf_65_01>=8000000 , 'VHP', 0)))))\nhist(df.2001$Pop_Sup_65_01, breaks=100)\nPop_Sup_65_01_cat <- as.factor(ifelse(df.2001$Pop_Sup_65_01< 400000, 'LP',\n                                      ifelse(df.2001$Pop_Sup_65_01>=400000 & df.2001$Pop_Sup_65_01<800000 , 'MP', \n                                             ifelse(df.2001$Pop_Sup_65_01>=800000 & df.2001$Pop_Sup_65_01<1100000 , 'HP', \n                                                    ifelse(df.2001$Pop_Sup_65_01>=1100000 , 'VHP', 0)))))\n\n\ndf.2001['IM_LOC'] <- IM_Loc_01_cat\ndf.2001['POP'] <- POP_01_cat\ndf.2001['IM_INT'] <- IM_INT_01_cat\ndf.2001['NB_NAI'] <- Nb_Nai_01_cat\ndf.2001['NB_DC'] <- Nb_DC_01_cat\ndf.2001['POP_INF'] <- Pop_inf_65_01_cat\ndf.2001['POP_SUP'] <- Pop_Sup_65_01_cat\n\ndf.2001.AFCM <- df.2001[,c(9:15)]\n  \nres.mca = MCA(df.2001.AFCM)\n\ndimdesc(res.mca)\npng(\"EllispseDC_NAI.png\")\nplotellipses(res.mca,keepvar=c(5,4))\ndev.off()\n\npng(\"EllispseINF_SUP.png\")\nplotellipses(res.mca,keepvar=c(6,7))\ndev.off()\n\npng(\"EllispsePop_IM.png\")\nplotellipses(res.mca,keepvar=c(1,2,3))\ndev.off()\n  \ncolones_interet <- c(1,3, 9, 11, 13, 15,16)\ndf<- df[,colones_interet]\n\nstat.graph <- 1\nva.num<-which(sapply(df,is.numeric))\nva.cat<-which(sapply(df,is.factor))\ndf.num<- df[,va.num]\ndf.cat<- df[,va.cat]\n\nnb.ind <- dim(df.2001.AFCM)[1]\n\nif (stat.graph) \n{ \n  df.num.scale <-apply(df.num,2,scale)\n  PROC_BOXPLOTALL(df.num.scale, p = c(1,1), main.name = 'donn?es standardis?es')\n}\n\n\n# =========================================================\n#  --------------- POPULATION -----------------------\n# =========================================================\nstates.latlon <- read.csv(\"state_latlon.csv\", header=TRUE, sep=',')\n\nUS = map(\"state\", fill = TRUE, plot = FALSE)\nPop01 <- df[order(df$Pop_Tot_01),]\nPop00 <- df[order(df$Pop_Tot_00),]\ndpt01 <- Pop01$State\ndpt00 <- Pop00$State\nmatch01 <- match.map(US, dpt01, exact=FALSE)\nmatch00 <- match.map(US, dpt00, exact=FALSE)\nblues <- colorRampPalette(brewer.pal(9,\"Blues\"))(100)\ncolors01 <- blues[match01]\ncolors00 <- blues[match00]\npng(\"pop01.png\")\nmap(\"state\", fill=TRUE, col=colors01, resolution=0)\ntext(states.latlon$state, x=states.latlon$longitude, y=states.latlon$latitude)\ndev.off()\n\npng(\"pop00.png\")\nmap(\"state\", fill=TRUE, col=colors00, resolution=0)\ntext(states.latlon$state, x=states.latlon$longitude, y=states.latlon$latitude)\ndev.off()\n\n\n# =======================================================\n#  --------------- Local Immigration -----------------------\n# =========================================================\n\nUS = map(\"state\", fill = TRUE, plot = FALSE)\nIm.Loc.01 <- df[order(df$IM_Loc_00),]\nIm.Loc.00 <- df[order(df$IM_Loc_01),]\ndpt01.Im <- Im.Loc.01$State\ndpt00.Im <- Im.Loc.00$State\nmatch01.Im <- match.map(US, dpt01.Im, exact=FALSE)\nmatch00.Im <- match.map(US, dpt00.Im, exact=FALSE)\nReds <- colorRampPalette(brewer.pal(9,\"Reds\"))(100)\ncolors01.Im <- Reds[match01.Im]\ncolors00.Im <- Reds[match00.Im]\n\npng(\"Map_IM_Loc_01.png\")\nmap(\"state\", fill=TRUE, col=colors01.Im, resolution=0)\ntext(states.latlon$state, x=states.latlon$longitude, y=states.latlon$latitude)\nmin <- Im.Loc.01$IM_Loc_01[1]\nmax <-  Im.Loc.01$IM_Loc_01[length(Im.Loc.01$IM_Loc_01)]\nlegend(\"bottomright\", legend = trunc(seq(min, max, abs(max-min)/10)), pch = 20, col = Reds[seq(0,63, 63/11)])\ndev.off()\n\npng(\"Map_IM_Loc_00.png\")\nmap(\"state\", fill=TRUE, col=colors00.Im, resolution=0)\ntext(states.latlon$state, x=states.latlon$longitude, y=states.latlon$latitude)\nmin <- Im.Loc.00$IM_Loc_00[1]\nmax <-  Im.Loc.00$IM_Loc_00[length(Im.Loc.00$IM_Loc_00)]\nlegend(\"bottomright\", legend = trunc(seq(min, max, abs(max-min)/10)), pch = 20, col = Reds[seq(0,63, 63/11)])\ndev.off()\n\n# =======================================================\n#  --------------- International Immigration -----------------------\n# =========================================================\n\nUS = map(\"state\", fill = TRUE, plot = FALSE)\nIm.Int.01 <- df[order(df$IM_Int_00),]\nIm.Int.00 <- df[order(df$IM_Int_01),]\ndpt01.Im.Int <- Im.Int.01$State\ndpt00.Im.Int <- Im.Int.00$State\nmatch01.Im.Int <- match.map(US, dpt01.Im.Int, exact=FALSE)\nmatch00.Im.Int <- match.map(US, dpt00.Im.Int, exact=FALSE)\nPurples <- colorRampPalette(brewer.pal(9,\"Purples\"))(100)\ncolors01.Im.Int <- Purples[match01.Im.Int]\ncolors00.Im.Int <- Purples[match00.Im.Int]\n\npng(\"Map_IM_Int_01.png\")\nmap(\"state\", fill=TRUE, col=colors01.Im.Int, resolution=0)\ntext(states.latlon$state, x=states.latlon$longitude, y=states.latlon$latitude)\nmin <- Im.Int.01$IM_Int_01[1]\nmax <-  Im.Int.01$IM_Int_01[length(Im.Int.01$IM_Int_01)]\nlegend(\"bottomright\", legend = trunc(seq(min, max, abs(max-min)/10)), pch = 20, col = Purples[seq(0,63, 63/11)])\ndev.off()\n\npng(\"Map_IM_Int_00.png\")\nmap(\"state\", fill=TRUE, col=colors00.Im.Int, resolution=0)\ntext(states.latlon$state, x=states.latlon$longitude, y=states.latlon$latitude)\nmin <- Im.Int.00$IM_Int_00[1]\nmax <-  Im.Int.00$IM_Int_00[length(Im.Int.00$IM_Int_00)]\nlegend(\"bottomright\", legend = trunc(seq(min, max, abs(max-min)/10)), pch = 20, col = Purples[seq(0,63, 63/11)])\ndev.off()\n# =========================================================\n#  --------------- POPULATION -----------------------\n# =========================================================\n\nUS = map(\"state\", fill = TRUE, plot = FALSE)\nSup_65_01 <- df[order(df$Pop_Sup_65_01),]\nSup_65_00 <- df[order(df$Pop_sup_65_00),]\ndpt01.sup <- Sup_65_01$State\ndpt00.sup <- Sup_65_00$State\nmatch01.sup <- match.map(US, dpt01.sup, exact=FALSE)\nmatch00.sup <- match.map(US, dpt00.sup, exact=FALSE)\nGreens <- colorRampPalette(brewer.pal(9,\"Greens\"))(100)\ncolors01.sup <- Greens[match01.sup]\ncolors00.sup <- Greens[match00.sup]\n\npng(\"Map_Pop_sup_01.png\")\nmap(\"state\", fill=TRUE, col=colors01.sup, resolution=0)\ntext(states.latlon$state, x=states.latlon$longitude, y=states.latlon$latitude)\nmin <- Sup_65_01$Pop_Sup_65_01[1]\nmax <-  Sup_65_01$Pop_Sup_65_01[length(Sup_65_01$Pop_Sup_65_01)]\n# legend(\"bottomright\", legend = trunc(seq(min, max, abs(max-min)/10)), pch = 20, col = Reds[seq(0,63, 63/11)])\ndev.off()\n\n\npng(\"Map_Pop_sup_00.png\")\nmap(\"state\", fill=TRUE, col=colors00.sup, resolution=0)\ntext(states.latlon$state, x=states.latlon$longitude, y=states.latlon$latitude)\ndev.off()\n\n# =========================================================\n#\n# =========================================================\n#-> Statistiques univari?es\n\nstat.sum <-apply(df.2001.AFCM,2,summary) ; \nstat.sd  <-apply(df.2001.AFCM,2,sd) \npca.stat <-rbind(stat.sum,stat.sd)\n\n\n#-> Matrice des corr?lations\n\ndf01 <- df[,c(3,5,7,9,11,13,15)]\ndf01.cor<-cor(df01)\ncol <- colorRampPalette(c(\"#BB4444\", \"#EE9988\", \"#FFFFFF\", \"#77AADD\", \"#4477AA\"))\n\npng(\"Corrélation.png\")\ncorrplot(df01.cor, method=\"shade\", shade.col=NA, tl.col=\"black\", tl.srt=45,col=col(200), addCoef.col=\"black\", addcolorlabel=\"no\", order=\"AOE\")\ndev.off()\n\n#-> Graphique en pairs\npairs(df.num)\n\n#=====================================================================================\n#                                      AFCM\n#=====================================================================================\n\nres.mca = MCA(df.2001.AFCM)\n\n\n#-------------------- NB AXES ET INERTIE -----------------------\n#-> inertie\ninertie<-matrix(c(seq(1,21,1),res.mca$eig[,3]),ncol = 2) ; \ncolnames(inertie)<-c('axe','% inertie cumul?e')\npng(\"AxeKaiser.png\")\nplot(inertie[,2]~inertie[,1],type = 'b',xlab='axe',ylab='% inertie cumul?e')\ndev.off()\n#-> indice de Kaiser\naxe.kaiser<-which(res.mca$eig[,1] >= 1)\n\n#-> intervalle de confiance d'Anderson\nIcm<-ca$eig[,1]*exp(-1.96*sqrt(2/(nb.ind-1)))  \nIcp<-ca$eig[,1]*exp(+1.96*sqrt(2/(nb.ind-1)))  \naxe.anderson<-as.matrix(cbind(Icm,res.mca$eig[,1],Icp),ncol = 3)\n\n#-> boostrap total sur les axes\nB = 2000 ; alpha = 0.1 ; nb.axe <-4\nlam.star <-matrix(0,ncol = nb.axe,nrow = B)  \nfor (i in 1 : B)\n{ boot.lam<- sample(size<-seq(1,nb.ind), replace = TRUE)\ndf.num.star <- df.2001.AFCM[boot.lam,]\nmca.star<-MCA(df.num.star,graph = FALSE)\nfor (j in 1 : nb.axe)\n{ lam.star[i,j]<-mca.star$eig[j,1]}\n}  \n\nlam.star.mean <-mean(lam.star[,1]) \nlam.star.sd <- sd(lam.star[,1])\nqt<-quantile(lam.star[,1], c(alpha/2, 1 - alpha/2))  \nICm<-qt[[1]] ;\nICp<-qt[[2]]  \n# histogramme\npng(\"Bootstrap.png\")\nhist(lam.star[,1],nclass = 50,cex.main = 0.8,freq = FALSE, cex.lab = 0.7,proba=TRUE, main = paste(\"f2 boostrap : nb = \", B,sep = \"\" ))\ns<-seq(min(lam.star[,1]),max(lam.star[,1]),le=50)\n# distribution normale et densit?\nprov<- dnorm(s,lam.star.mean,lam.star.sd) \nlines(prov~s,col = 'red')  \nlines(density(lam.star[,1]),col = 'blue',lty = 2)\n# limite des intervalles de confiance et moyenne + m?diane\nabline(v=mean(lam.star[,1]),col = 'red')\nabline(v=median(lam.star[,1]),col = 'blue')\nabline(v=ICm,col = 'red',lty = 2)\nabline(v=ICp,col = 'red',lty = 2) \ndev.off()\n# graphique des densit?s des axes s?lectionn?s \n\npng(\"AxesDensity.png\")\nplot(density(lam.star[,1]),col  = 'blue',lty = 1,type ='l',xlim=c(0,1), ylim =c(0,20),\n     main = 'densit? axes',cex.main = 0.6,xlab = '',ylab = '')\ntext(x=mean(lam.star[,1]),y = 1,label = paste('Axe ',1,sep = ''),cex =0.7,col = 'red')\nfor (i in 2: nb.axe)\n{ \n  lines(density(lam.star[,i]),col = 'blue' ,lty = 1)\n  text(x=mean(lam.star[,i]),y = 1,label = paste('Axe ',i,sep = ''),cex =0.7,col = 'red')\n}\ndev.off()\n\n#-------------------- VARIABLES ET QUALITE DE REPRESENTATION -----------------------\nmca.var<- res.mca$var$coord ; \ncolnames(mca.var)<-paste('axes ',seq(1,5,1),sep ='')\nmca.var.qlt<-res.mca$var$cos2[,c(1,2)]\nmca.var.qlt<-cbind(mca.var.qlt,(apply(mca.var.qlt,1,sum))) ; \ncolnames(mca.var.qlt)[3]<-'Sum qtl'\n\n#-------------------- INDIVIDUS ET CONTRIBUTION RELATIVE -----------------------\nmca.ind     <- res.mca$ind$coord ; \ncolnames(mca.ind)<-paste('axes ',seq(1,5,1),sep ='')\nca.ind.ctr <- ca$row$contrib[,c(1,2)]\n\n#-------------------- GRAPHIQUE AFC  ----------------------- -------------------------\n\npng(\"MCAPlot.png\")\nplot(res.mca, axe=c(1,2))\ndev.off()\npng(\"VariableMCA.png\")\nplot.MCA(res.mca, invisible=c(\"ind\"))\ndev.off()\npng(\"IndividusMCA.png\")\nplot.MCA(res.mca, invisible=c(\"var\"))\ndev.off()\n\ndf.2001.AFCM$num <- 1\n\nggplot(df.2001.AFCM, aes(x=df.2001.AFCM$IM_LOC, y=df.2001.AFCM$num)) +\n  geom_bar(stat=\"identity\", fill=\"lightblue\")\nggsave(\"HistoPopu.png\")\n\nggplot(df, aes(y=df$State, x=df$Pop_Tot_01)) + \n  geom_point(size=4) +\n  scale_colour_brewer(palette=\"Set1\")\nggsave(\"StatePopu.png\")\n\nggplot(df, aes(x=df$IM_Loc_01, y=df$IM_Int_01)) + \n  geom_text(aes(label=df$State), vjust=-1) +\n  geom_point() +\n  scale_colour_brewer(palette=\"Set1\")\nggsave(\"ImiLocInt.png\")\n\nggplot(df, aes(y=df$State, x=df$IM_Loc_00)) + \n  geom_point(size=4) +\n  scale_colour_brewer(palette=\"Set1\")\nggsave(\"ImLOC00.png\")\n\n\ndf$DiffPop <- df$Pop_Tot_01 - df$Pop_Tot_00\nmean.diff.pop <- mean(df$DiffPop)\n\nhist(df$DiffPop, breaks=100)\nggplot(df, aes(x=df$DiffPop)) + \n  geom_vline(xintercept = mean.diff.pop, color='red') +\n  geom_bar()\nggsave(\"DiffPop.png\")",
    "created" : 1444380970136.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4197751850",
    "id" : "97AE9C62",
    "lastKnownWriteTime" : 1446769476,
    "path" : "~/FouilleR/Exo3/Scripts.R",
    "project_path" : "Scripts.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}