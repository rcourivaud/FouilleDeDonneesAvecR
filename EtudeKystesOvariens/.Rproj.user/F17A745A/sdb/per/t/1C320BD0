{
    "contents" : "#===================================================\n#         premier exemple ; ACP-r\n#===================================================\nrm(list = ls()) \nlibrary(FactoMineR)\nlibrary(corrplot)\nlibrary(ggplot2)\ndirectory.down<- '//'\nfile<-'PB_II_ACP.txt'  \n\nsource(\"ACP_TOOLS.R\")  \n\n#-------------------------- formatage du data frame ---------------------------------\ndf<-read.table(file,header = TRUE)\ndf <- df[-c(106, 70,75, 118, 12, 95),]\n\n#--------------------------------- Options -----------------------------------------------\nfile.nameEXL <-'PCA_ACTIVITE.xlsx'\nstat.graph <- 1 # visualisation des graphiques stat desc.\n\n#----------------------------- Pre requis avant ACP --------------------------------------\n\n# 1.-> statistiques g?n?rales\nva.num<-which(sapply(df,is.numeric))\nva.cat<-which(sapply(df,is.factor))\n\n#-> Box plot full model\ndf.num<- df[,va.num] ;\ndf.cat<- df[,va.cat] ;\nnb.ind <- dim(df.num)[1]\n\n\n# box plot des variables numériques\ndf.num.scale <-apply(df.num,2,scale) \nPROC_BOXPLOTALL(df.num.scale, p = c(1,1), main.name = 'donnees standardisees')\n\n#-> Statistiques univari?es\nstat.sum <-apply(df.num,2,summary) ; \nstat.sd  <-apply(df.num,2,sd) \npca.stat <-rbind(stat.sum,stat.sd)\n\n#-> Statistiques categorielles: implementation dans une liste\nstat.cat.list<-list() ; iter <-1\nfor (i in 1:length(va.num))\n{ for (j in 1:length(va.cat))\n{\n  stat.cat.list[[iter]]<-aggregate(df.num[,i],list(df.cat[,j]),summary);\n  names(stat.cat.list)[iter]<-names(df.num)[i]\n  iter<-iter+1\n}\n}\n#-> Statistiques cat autre forlumation\n# aggregate(df.num[,i], list(df.cat[,1]),mean) }\n\n#-> Matrice des corr?lations  \npca.cor<-cor(df.num)\n\n#-> Graphique en pairs\npairs(df.num)\nmat.cor <- cor(df.num)\ncorrplot(mat.cor)\ncol <- colorRampPalette(c(\"#BB4444\", \"#EE9988\", \"#FFFFFF\", \"#77AADD\", \"#4477AA\"))\npng(\"Corrélation.png\")\ncorrplot(mat.cor, method=\"shade\", shade.col=NA, tl.col=\"black\", tl.srt=45,col=col(200), addCoef.col=\"black\", addcolorlabel=\"no\", order=\"AOE\")\ndev.off()\n\n\n#=====================================================================================\n#                                      ACP\n#=====================================================================================\npca<-PCA(df.num, graph = FALSE)\n\n#-------------------- NB AXES ET INERTIE -----------------------\n#-> inertie\ninertie<-matrix(c(seq(1,length(va.num),1),pca$eig[,3]),ncol = 2) ; colnames(inertie)<-c('axe','% inertie cumul?e')\npng(\"AxeKaiser.png\")\nplot(inertie[,2]~inertie[,1],type = 'b',xlab='axe',ylab='% inertie cumul?e')\ndev.off()\n\n#-> indice de Kaiser\naxe.kaiser<-which(pca$eig[,1] >= 1)\n\n#-> intervalle de confiance d'Anderson\nIcm<-pca$eig[,1]*exp(-1.96*sqrt(2/(nb.ind-1)))  \nIcp<-pca$eig[,1]*exp(+1.96*sqrt(2/(nb.ind-1)))  \naxe.anderson<-as.matrix(cbind(Icm,pca$eig[,1],Icp),ncol = 3)\n\n#-> boostrap total sur les axes\nB = 2000 ; alpha = 0.1 ; nb.axe <-4\nlam.star <-matrix(0,ncol = nb.axe,nrow = B)  \nfor (i in 1 : B)\n{ boot.lam<- sample(size<-seq(1,nb.ind), replace = TRUE)\ndf.num.star <- df.num[boot.lam,]\npca.star<-PCA(df.num.star,graph = FALSE)\nfor (j in 1 : nb.axe)\n{ lam.star[i,j]<-pca.star$eig[j,1]}\n}  \n\nlam.star.mean <-mean(lam.star[,1]) ; lam.star.sd <- sd(lam.star[,1])\nqt<-quantile(lam.star[,1], c(alpha/2, 1 - alpha/2)) ;  ICm<-qt[[1]] ;ICp<-qt[[2]]  \n# histogramme\nhist(lam.star[,1],nclass = 50,cex.main = 0.8,freq = FALSE, cex.lab = 0.7,proba=TRUE, main = paste(\"f2 boostrap : nb = \", B,sep = \"\" ))\ns<-seq(min(lam.star[,1]),max(lam.star[,1]),le=50)\n# distribution normale et densit?\nprov<- dnorm(s,lam.star.mean,lam.star.sd) \nlines(prov~s,col = 'red')  \nlines(density(lam.star[,1]),col = 'blue',lty = 2)\n# limite des intervalles de confiance et moyenne + m?diane\nabline(v=mean(lam.star[,1]),col = 'red')\nabline(v=median(lam.star[,1]),col = 'blue')\nabline(v=ICm,col = 'red',lty = 2)\nabline(v=ICp,col = 'red',lty = 2)\n# graphique des densit?s des axes s?lectionn?s \n\npng(\"QuatresAxes.png\")\nplot(density(lam.star[,1]),col  = 'blue',lty = 1,type ='l',xlim=c(0,5), ylim =c(0,8),\n     main = 'densit? axes',cex.main = 0.6,xlab = '',ylab = '')\ntext(x=mean(lam.star[,1]),y = 1,label = paste('Axe ',1,sep = ''),cex =0.7,col = 'red')\nfor (i in 2: nb.axe)\n{ \n  lines(density(lam.star[,i]),col = 'blue' ,lty = 1)\n  text(x=mean(lam.star[,i]),y = 1,label = paste('Axe ',i,sep = ''),cex =0.7,col = 'red')\n}\ndev.off()\n\n#-------------------- VARIABLES ET QUALITE DE REPRESENTATION -----------------------\npca.var<- pca$var$coord; \ncolnames(pca.var)<-paste('axes ',seq(1,4,1),sep ='')\npca.var.qlt<-pca$var$cos2[,c(1,2)]\npca.var.qlt<-cbind(pca.var.qlt,(apply(pca.var.qlt,1,sum))) ;\ncolnames(pca.var.qlt)[3]<-'Sum qtl'\n\n#-------------------- INDIVIDUS ET CONTRIBUTION RELATIVE -----------------------\npca.ind     <- pca$ind$coord ; colnames(pca.ind)<-paste('axes ',seq(1,4,1),sep ='')\npca.ind.ctr <- pca$ind$contrib[,c(1,2)]\n\n#-------------------- GRAPHIQUE PCA  ----------------------- -------------------------\npng(\"GraphPCACErcle.png\")\nplot.PCA(pca,axes = c(1,2),choix = 'var',cex.main = 0.8)\ndev.off()\n\npng(\"GraphPCAPoints.png\")\nplot.PCA(pca,axes = c(1,2),choix = 'ind',cex.main = 0.8)\ndev.off()\n\n#-------------------- GRAPHIQUES PCA AVEC VARIABLES CATEGORIELLEE ET ELLIPSOIDE DE CONFIANCE -----------------------\nfor (i in 1 : length(va.cat))\n{ \n  df.acp <-cbind(df.num,df.cat[,i])\n  \n  names(df.acp)[(length(va.num)+1)]<-names(df.cat)[i];\n  res.pca<-PCA(df.acp,ncp = 2,quali.sup = (length(va.num)+1),graph = FALSE)\n  concat.data   <-cbind.data.frame(df.acp[,5],res.pca$ind$coor)\n  ellipse.coord <- coord.ellipse(concat.data,bary = TRUE)\n  plot.PCA(res.pca,axes = c(1,2),choix = 'ind',cex.main = 0.8,title = names(df.acp)[11],\n           col.quali = 'red',col.ind = 'blue',ellipse = ellipse.coord)\n  \n}\n\n#-------------------- calcul des distances  -----------------------\n\ndist_eucli <- function(x1, x2, y1, y2){\n  return(sqrt((x1-x2)^2 +(y1-y2)^2))\n}\n\nconcat.data.trait <- cbind(concat.data, df$TT)\ncolnames(concat.data.trait) <- c(\"cat\", \"Dim1\", \"Dim2\", \"TT\")\naggdata <-aggregate(concat.data.trait[,2:3], by=list(cat = concat.data.trait$TT),FUN=mean, na.rm=TRUE)\nprint(aggdata)\n\n\ndist_REF <-  dist_eucli(concat.data.trait[,2], aggdata[1,2], concat.data.trait[,3], aggdata[1,3])\ndist_TEST <-  dist_eucli(concat.data.trait[,2], aggdata[2,2], concat.data.trait[,3], aggdata[2,3])\n\nmin_dist_TT <- function(test,ref){\n  if(test<ref){\n    return('TEST')\n  }\n  else{\n    return('REF')\n  }\n}\n\nresult <- c()\n\nfor(i in 1:length(dist_TEST)){\n  result <- c(result, min_dist_TT(dist_TEST[i], dist_REF[i]))\n}\nconcat.data.trait.clean <- cbind(concat.data.trait, result)\n\nplot(concat.data.trait.clean$Dim1, concat.data.trait.clean$Dim2, col=concat.data.trait.clean$result, type='p')\npoints(aggdata$Dim1, aggdata$Dim2, col= aggdata$cat, cex=3, bg=c('blue', 'green'))\ntext(aggdata$Dim1, aggdata$Dim2,aggdata$cat, cex=1.5)\naggdata['result']<- aggdata$cat\nall.data <- merge(concat.data.trait.clean, aggdata, by='result')\nfor(i in 1: length(concat.data.trait.clean$cat)){\n  x.val <- all.data[i,3]\n  y.val <- all.data[i,4]\n  x.cat <- all.data[i,7]\n  y.cat <- all.data[i,8]\n  segments(x.val,y.val , x1 = x.cat, y1 = y.cat, col = all.data[i,1], lty = par(\"lty\"), lwd = par(\"lwd\"))\n}\ndiff_calc <- !as.logical(as.numeric(concat.data.trait.clean$TT) -  as.numeric(concat.data.trait.clean$result))\n\nsummary(diff_calc)\n\nconcat.data.trait.diff <- cbind(concat.data.trait.clean, diff_calc)\n\npoints(concat.data.trait.diff[diff_calc,]$Dim1, concat.data.trait.diff[diff_calc,]$Dim2, col=concat.data.trait.diff[diff_calc,]$result, type='p', pch=19, cex=2)\n\nggplot(df, aes(y=df$SURVIE, x=df$K_SCORE, colour=df$TT, shape=df$NEO)) + \n  geom_point(size=4) +\n  scale_colour_brewer(palette=\"Set1\")\nggsave(\"KscoreSUrvie.png\")\n\nggplot(df, aes(x=df$NEO, y=df$SURVIE)) +\n  geom_bar(stat=\"identity\", fill=\"lightblue\")\nggsave(\"SurvieTT.png\")\n\nggplot(df, aes(x=df$TT, y=df$SURVIE)) +\n  geom_bar(stat=\"identity\", fill=\"lightblue\")\nggsave(\"SurvieRefTest.png\")",
    "created" : 1446591540531.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3827547525",
    "id" : "1C320BD0",
    "lastKnownWriteTime" : 1446591503,
    "path" : "~/FouilleR/Exo1/Exo1.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}