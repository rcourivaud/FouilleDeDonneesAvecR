{
    "contents" : "#===================================================\n#         premier exemple ; ACP-r\n#===================================================\nrm(list = ls()) \nlibrary(FactoMineR)\nlibrary(corrplot)\nlibrary(ggplot2)\n\ndirectory.down<-'//'\nfile.down<-'PB_II_ACP.txt' ;  \n\nsource(\"ACP_TOOLS.R\")  \n\n#-------------------------- formatage du data frame ---------------------------------\ndf<-read.table(file.down,header = TRUE)\nid.names<-df[,1]\n\n#On supprime les points les plus espacés\ndf <- df[-c(116, 33, 93, 67, 79, 35),]\n\n#--------------------------------- Options -----------------------------------------------\nfile.nameEXL <-'PCA_ACTIVITE.xlsx'\nstat.graph <- 0 # visualisation des graphiques stat desc.\n\n#----------------------------- Pre requis avant ACP --------------------------------------\n\n# 1.-> statistiques g?n?rales\nva.num<-which(sapply(df,is.numeric))\nva.cat<-which(sapply(df,is.factor))\n\n#-> Box plot full model\ndf.num<- df[,va.num] ;\ndf.cat<- df[,va.cat] ;\nnb.ind <- dim(df.num)[1]\n\nif (stat.graph) \n{ \n  df.num.scale <-apply(df.num,2,scale)\n  PROC_BOXPLOTALL(df.num.scale, p = c(1,1), main.name = 'donn?es standardis?es')\n}\n\n#-> Statistiques univari?es\nstat.sum <-apply(df.num,2,summary) ; \nstat.sd  <-apply(df.num,2,sd) \npca.stat <-rbind(stat.sum,stat.sd)\n\n#-> Statistiques cat?gorielles: implementation dans une liste\nstat.cat.list<-list() ; iter <-1\nfor (i in 1:length(va.num))\n{\n  stat.cat.list[[iter]]<-aggregate(df.num[,i],list(df.cat),summary)\n  names(stat.cat.list)[iter]<-names(df.num)[i]\n  iter<-iter+1\n}\n#-> Statistiques cat autre forlumation\n# aggregate(df.num[,i], list(df.cat),mean) }\n\n#-> Matrice des corr?lations  \npca.cor<-cor(df.num)\ncol <- colorRampPalette(c(\"#BB4444\", \"#EE9988\", \"#FFFFFF\", \"#77AADD\", \"#4477AA\"))\npng(\"Corrélation.png\")\ncorrplot(pca.cor, method=\"shade\", shade.col=NA, tl.col=\"black\", tl.srt=45,col=col(200), addCoef.col=\"black\", addcolorlabel=\"no\", order=\"AOE\")\n#-> Graphique en pairs\ndev.off()\npairs(df.num)\n\n#=====================================================================================\n#                                      ACP\n#=====================================================================================\npca<-PCA(df.num, graph = FALSE)\n\n#-------------------- NB AXES ET INERTIE -----------------------\n#-> inertie\ninertie<-matrix(c(seq(1,length(va.num),1),pca$eig[,3]),ncol = 2)\ncolnames(inertie)<-c('axe','% inertie cumul?e')\npng('AxeKaiser.png')\nplot(inertie[,2]~inertie[,1],type = 'b',xlab='axe',ylab='% inertie cumul?e')\ndev.off()\n\n#-> indice de Kaiser\naxe.kaiser<-which(pca$eig[,1] >= 1)\n\n#-> intervalle de confiance d'Anderson\nIcm<-pca$eig[,1]*exp(-1.96*sqrt(2/(nb.ind-1)))  \nIcp<-pca$eig[,1]*exp(+1.96*sqrt(2/(nb.ind-1)))  \naxe.anderson<-as.matrix(cbind(Icm,pca$eig[,1],Icp),ncol = 3)\n\n#-> boostrap total sur les axes\nB = 2000 ; alpha = 0.1 ; nb.axe <-4\nlam.star <-matrix(0,ncol = nb.axe,nrow = B)  \nfor (i in 1 : B)\n{ boot.lam<- sample(size<-seq(1,nb.ind), replace = TRUE)\ndf.num.star <- df.num[boot.lam,]\npca.star<-PCA(df.num.star,graph = FALSE)\nfor (j in 1 : nb.axe)\n{ lam.star[i,j]<-pca.star$eig[j,1]}\n}  \n\nlam.star.mean <-mean(lam.star[,1]) ; \nlam.star.sd <- sd(lam.star[,1])\nqt<-quantile(lam.star[,1], c(alpha/2, 1 - alpha/2)) ;  \nICm<-qt[[1]] ;ICp<-qt[[2]]  \n# histogramme\nhist(lam.star[,1],nclass = 50,cex.main = 0.8,freq = FALSE, cex.lab = 0.7,proba=TRUE, main = paste(\"f2 boostrap : nb = \", B,sep = \"\" ))\ns<-seq(min(lam.star[,1]),max(lam.star[,1]),le=50)\n# distribution normale et densit?\nprov<- dnorm(s,lam.star.mean,lam.star.sd) \nlines(prov~s,col = 'red')  \nlines(density(lam.star[,1]),col = 'blue',lty = 2)\n# limite des intervalles de confiance et moyenne + m?diane\nabline(v=mean(lam.star[,1]),col = 'red')\nabline(v=median(lam.star[,1]),col = 'blue')\nabline(v=ICm,col = 'red',lty = 2)\nabline(v=ICp,col = 'red',lty = 2)       \n# graphique des densit?s des axes s?lectionn?s \nplot(density(lam.star[,1]),col  = 'blue',lty = 1,type ='l',xlim=c(0,10), ylim =c(0,max(lam.star)),\n     main = 'densit? axes',cex.main = 0.6,xlab = '',ylab = '')\ntext(x=mean(lam.star[,1]),y = 1,label = paste('Axe ',1,sep = ''),cex =0.7,col = 'red')\nfor (i in 2: nb.axe)\n{ \n  lines(density(lam.star[,i]),col = 'blue' ,lty = 1)\n  text(x=mean(lam.star[,i]),y = 1,label = paste('Axe ',i,sep = ''),cex =0.7,col = 'red')\n}\n\n#-------------------- VARIABLES ET QUALITE DE REPRESENTATION -----------------------\npca.var<- pca$var$coord ; colnames(pca.var)<-paste('axes ',seq(1,5,1),sep ='')\npca.var.qlt<-pca$var$cos2[,c(1,2)]\npca.var.qlt<-cbind(pca.var.qlt,(apply(pca.var.qlt,1,sum))) ; colnames(pca.var.qlt)[3]<-'Sum qtl'\n\n#-------------------- INDIVIDUS ET CONTRIBUTION RELATIVE -----------------------\npca.ind     <- pca$ind$coord ; colnames(pca.ind)<-paste('axes ',seq(1,5,1),sep ='')\npca.ind.ctr <- pca$ind$contrib[,c(1,2)]\n\n#-------------------- GRAPHIQUE PCA  ----------------------- -------------------------\nplot.PCA(pca,axes = c(1,2),choix = 'var',cex.main = 0.8)\nplot.PCA(pca,axes = c(1,2),choix = 'ind',cex.main = 0.8)\n\n#-------------------- GRAPHIQUES PCA AVEC VARIABLES CATEGORIELLEE ET ELLIPSOIDE DE CONFIANCE -----------------------\n\n  df.acp <-cbind(df.num,df.cat);\n  names(df.acp)[(length(va.num)+1)]<-'CLA';\n  res.pca<-PCA(df.acp,ncp = 2,quali.sup = (length(va.num)+1),graph = FALSE)\n  concat.data   <-cbind.data.frame(df.acp[,11],res.pca$ind$coor)\n  ellipse.coord <- coord.ellipse(concat.data,bary = TRUE)\n  plot.PCA(res.pca,axes = c(1,2),choix = 'ind',cex.main = 0.8,title = names(df.acp)[11],\n           col.quali = 'red',col.ind = 'blue',ellipse = ellipse.coord)\n  \n#=====================================================================================\n#                            EXPORTATION EXCEL\n#=====================================================================================\n\nexport2excel<-0\nif(export2excel)\n{\n  library(excel.link)\n  xls=xl.get.excel() ; \n  # test l'existance du fichier\n  if(file.exists(paste(directory.down,file.nameEXL,sep = '')))\n  {xl.workbook.open(paste(directory.down,file.nameEXL,sep = ''))        \n  }else{xl.workbook.add() ;  wb<-xl.workbooks()}        \n  # ouverture d'exc et addition d'un classeur\n  sheets<-xl.sheets() ; \n  #-> Teste l'existence de la feuille\n  if(length(unique(is.element(sheets,'PCA_STAT')))== 1){xl.sheet.add(\"PCA_STAT\")}\n  # addition d'une feuille\n  xl.sheet.activate(\"PCA_STAT\")\n  #--> REFERENCES\n  idl<- 3 ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)               ; nxt=xl.write(\"PCA\",rng)\n  idl<- idl + 1 ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)         ; nxt=xl.write('STATISTIQUES DESCRIPTIVES' ,rng)\n  idl<- idl + 1 ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)         ; nxt=xl.write('statistiques globales' ,rng)\n  idl<- idl + 1 ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)         ; nxt=xl.write(pca.stat,rng,row.names=TRUE,col.names=TRUE)\n  idl<- idl + 9 ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)         ; nxt=xl.write('Statistiques cat?gorielles' ,rng)\n  for (i in 1 : length(stat.cat.list))\n  {   temp <- as.matrix(stat.cat.list[[i]]) ; nl<-dim(temp)[1] \n  colnames(temp)[1] <- names(stat.cat.list)[i]\n  idl<- idl + nl + 2 ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)    ; nxt=xl.write(temp,rng,row.names=TRUE,col.names=TRUE)        \n  }\n  \n  if(length(unique(is.element(sheets,'PCA')))== 1){xl.sheet.add(\"PCA\")}\n  # addition d'une feuille\n  xl.sheet.activate(\"PCA\")\n  idl <- 3       ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)  ; nxt=xl.write('Matrice des corr?lations',rng)    \n  idl<- idl + 1 ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)  ; nxt=xl.write(pca.cor,rng,row.names=TRUE,col.names=TRUE)\n  idl<- idl + 10 ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)  ; nxt=xl.write(pca.stat,rng,row.names=TRUE,col.names=TRUE)\n  idl<- idl + 10 ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)  ; nxt=xl.write('variables coordonn?es',rng)\n  idl<- idl + 1  ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)  ; nxt=xl.write(pca.var,rng,row.names=TRUE,col.names=TRUE)\n  idl<- idl + 10 ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)  ; nxt=xl.write(' qualit? de r?pr?sentaion des variables',rng)\n  idl<- idl + 1  ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)  ; nxt=xl.write(pca.var.qlt,rng,row.names=TRUE,col.names=TRUE)\n  idl<- idl + 10 ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)  ; nxt=xl.write('individus corrdonn?es',rng)\n  idl<- idl + 1  ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)  ; nxt=xl.write(pca.ind,rng,row.names=TRUE,col.names=TRUE)\n  idl<- idl + 16 ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)  ; nxt=xl.write('Qualit? de repr?sentation individus',rng)\n  idl<- idl + 1  ; rng=xls[[\"Activesheet\"]]$Cells(idl,3)  ; nxt=xl.write(pca.ind.qlt,rng,row.names=TRUE,col.names=TRUE)\n  \n  \n  # xl.workbook.save(paste(directory.down,file.nameEXL,sep = ''))\n}\n\n\n#-------------------- calcul des distances  -----------------------\n\ndist_eucli <- function(x1, x2, y1, y2){\n  return(sqrt((x1-x2)^2 +(y1-y2)^2))\n}\n\nconcat.data.trait <- concat.data\ncolnames(concat.data.trait) <- c(\"CLA\", \"Dim1\", \"Dim2\")\naggdata <-aggregate(concat.data.trait[,2:3], by=list(cat = concat.data.trait$CLA),FUN=mean, na.rm=TRUE)\nprint(aggdata)\n\n\ndist.KBEnd <- dist_eucli(concat.data.trait[,2], aggdata[1,2], concat.data.trait[,3], aggdata[1,3])\ndist.KBSer <- dist_eucli(concat.data.trait[,2], aggdata[2,2], concat.data.trait[,3], aggdata[2,3])\ndist.KBSM <- dist_eucli(concat.data.trait[,2], aggdata[3,2], concat.data.trait[,3], aggdata[3,3])\ndist.KF <- dist_eucli(concat.data.trait[,2], aggdata[4,2], concat.data.trait[,3], aggdata[4,3])\ndist.KOM <- dist_eucli(concat.data.trait[,2], aggdata[5,2], concat.data.trait[,3], aggdata[5,3])\n\nmin_dist_CAT <- function(a, b, c, d, e){\n  if(a==min(a,b,c,d,e)){\n    return('KBEnd')\n  }\n  else if(b==min(a,b,c,d,e)){\n    return('KBSer')\n  }\n  else if(c==min(a,b,c,d,e)){\n    return('KBSM')\n  }\n  else if(d==min(a,b,c,d,e)){\n    return('KF')\n  }\n  else if(e==min(a,b,c,d,e)){\n    return('KOM')\n  }\n}\n\nresult <- c()\n\nfor(i in 1:length(dist.KOM)){\n  result <- c(result, min_dist_CAT(dist.KBEnd[i], dist.KBSer[i], dist.KBSM[i], dist.KF[i], dist.KOM[i]))\n}\nconcat.data.trait.clean <- cbind(concat.data.trait, result)\npng(\"plottest1.png\")\nplot(concat.data.trait.clean$Dim1, concat.data.trait.clean$Dim2, col=concat.data.trait.clean$result, type='p')\npoints(aggdata$Dim1, aggdata$Dim2, col= aggdata$result, cex=3, bg=c('blue', 'green'))\ntext(aggdata$Dim1+1, aggdata$Dim2,aggdata$cat, cex=1.5)\n\naggdata['result']<- aggdata$cat\nall.data <- merge(concat.data.trait.clean, aggdata, by='result')\nfor(i in 1: length(concat.data.trait.clean$CLA)){\n  x.val <- all.data[i,3]\n  y.val <- all.data[i,4]\n  x.cat <- all.data[i,6]\n  y.cat <- all.data[i,7]\n  segments(x.val,y.val , x1 = x.cat, y1 = y.cat, col = all.data[i,1], lty = par(\"lty\"), lwd = par(\"lwd\"))\n}\n\n\ndiff_calc <- !as.logical(as.numeric(concat.data.trait.clean$CLA) -  as.numeric(concat.data.trait.clean$result))\n\nsummary(diff_calc)\n\nconcat.data.trait.diff <- cbind(concat.data.trait.clean, diff_calc)\n\n#Affiche les \npoints(concat.data.trait.diff[concat.data.trait.diff$diff_calc,]$Dim1, concat.data.trait.diff[concat.data.trait.diff$diff_calc,]$Dim2, col=concat.data.trait.diff[concat.data.trait.diff$diff_calc,]$result, type='p', pch=19, cex=2)\ndev.off()\n\n\ndf$num <- 1\n\nggplot(df, aes(x=df$cla, y=df$num)) +\n  geom_bar(stat=\"identity\", fill=\"lightblue\")\nggsave(\"NbClasse.png\")\n\n\n\n",
    "created" : 1444370829789.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2612637068",
    "id" : "3E63ED31",
    "lastKnownWriteTime" : 1446721176,
    "path" : "~/FouilleR/Exo2/Exo2.R",
    "project_path" : "Exo2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}